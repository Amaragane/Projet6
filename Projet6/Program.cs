using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Projet6.Data;
using Projet6.Services;
using Projet6.Models;

namespace Projet6
{
    class Program
    {
        static async Task Main(string[] args)
        {
            Console.OutputEncoding = System.Text.Encoding.UTF8;
            Console.WriteLine("=".PadRight(60, '='));
            Console.WriteLine(" üîç NEXAWORK - SYST√àME DE REQU√äTES TICKETS üîç");
            Console.WriteLine("=".PadRight(60, '='));
            Console.WriteLine();

            try
            {
                // Configuration du host avec injection de d√©pendances
                var host = CreateHostBuilder(args).Build();

                using var scope = host.Services.CreateScope();
                var context = scope.ServiceProvider.GetRequiredService<NexaWorksContext>();
                var queryService = scope.ServiceProvider.GetRequiredService<TicketQueryService>();

                // V√©rifier et cr√©er la base de donn√©es si n√©cessaire
                await EnsureDatabaseCreatedAsync(context);

                // Menu principal
                await ShowMainMenuAsync(queryService);
            }
            catch (Exception ex)
            {
                Console.WriteLine("‚ùå ERREUR CRITIQUE AU D√âMARRAGE :");
                Console.WriteLine($"   {ex.Message}");
                Console.WriteLine();
                Console.WriteLine("üîß SOLUTIONS POSSIBLES :");
                Console.WriteLine("1. V√©rifiez que SQL Server LocalDB est install√©");
                Console.WriteLine("2. Essayez d'installer SQL Server Express");
                Console.WriteLine("3. Modifiez la cha√Æne de connexion dans appsettings.json");
                Console.WriteLine();
                Console.WriteLine("Appuyez sur une touche pour quitter...");
                Console.ReadKey();
                Environment.Exit(1);
            }
        }

        static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                .ConfigureServices((context, services) =>
                {
                    // Essayer plusieurs cha√Ænes de connexion par priorit√©
                    var connectionString = GetBestConnectionString(context.Configuration);
                    
                    Console.WriteLine($"üîå Tentative de connexion : {GetConnectionDisplayName(connectionString)}");
                    
                    services.AddDbContext<NexaWorksContext>(options =>
                        options.UseSqlServer(connectionString, sqlOptions =>
                        {
                            sqlOptions.EnableRetryOnFailure(
                                maxRetryCount: 3,
                                maxRetryDelay: TimeSpan.FromSeconds(5),
                                errorNumbersToAdd: null);
                        }));
                    
                    services.AddScoped<TicketQueryService>();
                });

        static string GetBestConnectionString(IConfiguration configuration)
        {
            // Liste des cha√Ænes de connexion par ordre de priorit√©
            var connectionStrings = new[]
            {
                // 1. LocalDB (par d√©faut)
                "Server=(localdb)\\mssqllocaldb;Database=NexaWorksConsole;Trusted_Connection=true;MultipleActiveResultSets=true;",
                
                // 2. SQL Server Express local
                "Server=.\\SQLEXPRESS;Database=NexaWorksConsole;Trusted_Connection=true;MultipleActiveResultSets=true;TrustServerCertificate=true;",
                
                // 3. SQL Server local
                "Server=.;Database=NexaWorksConsole;Trusted_Connection=true;MultipleActiveResultSets=true;TrustServerCertificate=true;",
                
                // 4. Configuration personnalis√©e
                configuration.GetConnectionString("DefaultConnection")
            };

            // Retourner la premi√®re qui n'est pas nulle
            return connectionStrings.FirstOrDefault(cs => !string.IsNullOrEmpty(cs)) 
                   ?? connectionStrings[0];
        }

        static string GetConnectionDisplayName(string connectionString)
        {
            if (connectionString.Contains("(localdb)"))
                return "SQL Server LocalDB";
            if (connectionString.Contains("SQLEXPRESS"))
                return "SQL Server Express";
            if (connectionString.Contains("Server=."))
                return "SQL Server Local";
            return "Configuration personnalis√©e";
        }

        static async Task EnsureDatabaseCreatedAsync(NexaWorksContext context)
        {
            Console.WriteLine("‚öôÔ∏è  V√©rification de la base de donn√©es...");
            
            try
            {
                // Test de connexion
                Console.WriteLine("üîó Test de connexion √† la base de donn√©es...");
                await context.Database.CanConnectAsync();
                Console.WriteLine("‚úÖ Connexion r√©ussie !");

                // Cr√©ation de la base si n√©cessaire
                Console.WriteLine("üèóÔ∏è  Cr√©ation de la base de donn√©es si n√©cessaire...");
                var created = await context.Database.EnsureCreatedAsync();
                
                if (created)
                {
                    Console.WriteLine("‚úÖ Base de donn√©es cr√©√©e avec succ√®s !");
                }
                else
                {
                    Console.WriteLine("‚ÑπÔ∏è  Base de donn√©es d√©j√† existante.");
                }
                
                // Compter les tickets pour v√©rifier que les donn√©es sont pr√©sentes
                Console.WriteLine("üìä V√©rification des donn√©es...");
                var ticketCount = await context.Tickets.CountAsync();
                Console.WriteLine($"üìä Nombre de tickets en base : {ticketCount}");
                
                if (ticketCount == 0)
                {
                    Console.WriteLine("‚ö†Ô∏è  Aucun ticket trouv√©. Les donn√©es de seed n'ont peut-√™tre pas √©t√© cr√©√©es.");
                    Console.WriteLine("üîÑ Tentative de recr√©ation de la base...");
                    await context.Database.EnsureDeletedAsync();
                    await context.Database.EnsureCreatedAsync();
                    ticketCount = await context.Tickets.CountAsync();
                    Console.WriteLine($"üìä Nombre de tickets apr√®s recr√©ation : {ticketCount}");
                }
                
                Console.WriteLine();
            }
            catch (Microsoft.Data.SqlClient.SqlException sqlEx)
            {
                Console.WriteLine($"‚ùå Erreur SQL : {sqlEx.Message}");
                Console.WriteLine();
                Console.WriteLine("üîß SOLUTIONS SUGG√âR√âES :");
                
                if (sqlEx.Message.Contains("LocalDB") || sqlEx.Message.Contains("localdb"))
                {
                    Console.WriteLine("üì• 1. Installez SQL Server LocalDB :");
                    Console.WriteLine("   - T√©l√©chargez depuis : https://learn.microsoft.com/sql/database-engine/configure-windows/sql-server-express-localdb");
                    Console.WriteLine("   - Ou installez SQL Server Express");
                    Console.WriteLine();
                    Console.WriteLine("üîÑ 2. Ou modifiez appsettings.json avec cette cha√Æne :");
                    Console.WriteLine("   \"Server=.\\\\SQLEXPRESS;Database=NexaWorksConsole;Trusted_Connection=true;TrustServerCertificate=true;\"");
                }
                else if (sqlEx.Message.Contains("SQLEXPRESS"))
                {
                    Console.WriteLine("üì• 1. Installez SQL Server Express");
                    Console.WriteLine("üîÑ 2. Ou utilisez une autre instance SQL Server");
                }
                else
                {
                    Console.WriteLine("üîÑ 1. V√©rifiez que SQL Server est d√©marr√©");
                    Console.WriteLine("üîÑ 2. V√©rifiez les permissions de connexion");
                    Console.WriteLine($"üîÑ 3. Erreur d√©taill√©e : {sqlEx.Number}");
                }
                
                throw;
            }
            catch (InvalidOperationException invOpEx)
            {
                Console.WriteLine($"‚ùå Erreur de configuration : {invOpEx.Message}");
                Console.WriteLine();
                Console.WriteLine("üîß V√âRIFICATIONS :");
                Console.WriteLine("1. Cha√Æne de connexion dans appsettings.json");
                Console.WriteLine("2. Packages NuGet Entity Framework install√©s");
                Console.WriteLine("3. Configuration DbContext correcte");
                throw;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Erreur inattendue : {ex.Message}");
                Console.WriteLine($"üîç Type : {ex.GetType().Name}");
                Console.WriteLine();
                Console.WriteLine("üîß Informations de d√©bogage :");
                Console.WriteLine($"   - Exception compl√®te : {ex}");
                throw;
            }
        }

        static async Task ShowMainMenuAsync(TicketQueryService queryService)
        {
            while (true)
            {
                Console.Clear();
                Console.WriteLine("=".PadRight(60, '='));
                Console.WriteLine(" üîç MENU PRINCIPAL - REQU√äTES NEXAWORK");
                Console.WriteLine("=".PadRight(60, '='));
                Console.WriteLine();
                Console.WriteLine("üìã PROBL√àMES EN COURS");
                Console.WriteLine("1Ô∏è  Tous les probl√®mes en cours par produit et version");
                Console.WriteLine();
                Console.WriteLine("üìÖ PAR P√âRIODE");
                Console.WriteLine("2  Probl√®mes par p√©riode, produit et version");
                Console.WriteLine();
                Console.WriteLine("üîé PAR MOTS-CL√âS");
                Console.WriteLine("3  Recherche dans un produit et version");
                Console.WriteLine();
                Console.WriteLine("üîéüìÖ PAR P√âRIODE ET PAR MOTS-CL√âS");
                Console.WriteLine("4  Recherche dans un produit et version");
                Console.WriteLine();
                Console.WriteLine("0Ô∏è  Quitter");
                Console.WriteLine();
                Console.Write("Choisissez une option (0-4) : ");

                var choice = Console.ReadLine();

                try
                {
                    switch (choice)
                    {
                        case "1":
                            await ExecuteQuery1(queryService);
                            break;
                        case "2":
                            await ExecuteQuery2(queryService);
                            break;
                        case "3":
                            await ExecuteQuery3(queryService);
                            break;
                        case "4":
                            await ExecuteQuery4(queryService);
                            break;
                        case "0":
                            Console.WriteLine("\nüëã Au revoir !");
                            return;
                        default:
                            Console.WriteLine("\n‚ùå Option invalide. Appuyez sur une touche...");
                            Console.ReadKey();
                            break;
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"\n‚ùå Erreur : {ex.Message}");
                    Console.WriteLine("Appuyez sur une touche pour continuer...");
                    Console.ReadKey();
                }
            }
        }

        #region Ex√©cution des requ√™tes

        static async Task ExecuteQuery1(TicketQueryService queryService)
        {
            Console.Clear();
            Console.WriteLine("üìã Requ√™te 1 : Probl√®mes en cours par produit et version");
            Console.WriteLine("=".PadRight(60, '='));
            var statut = SelectStatut();

            var productId = await SelectProductAsync(queryService);
            if (productId == -1) return;

            var versionId = await SelectVersionAsync(queryService,productId);
            if (versionId == -1) return;

            var tickets = await queryService.GetProblemsInProgressByProductVersionAsync(statut, productId, versionId);
            DisplayTickets(tickets);
            
            Console.WriteLine("\nAppuyez sur une touche pour continuer...");
            Console.ReadKey();
        }

        static async Task ExecuteQuery2(TicketQueryService queryService)
        {
            Console.Clear();
            Console.WriteLine("üìÖ Requ√™te 2 : Probl√®mes par p√©riode, produit et version");
            Console.WriteLine("=".PadRight(60, '='));
            var statut = SelectStatut();

            var productId = await SelectProductAsync(queryService);
            if (productId == -1) return;

            var versionId = await SelectVersionAsync(queryService, productId);
            if (versionId == -1) return;

            var (startDate, endDate) = GetDateRange();
            if (startDate == null || endDate == null) return;

            var tickets = await queryService.GetProblemsByPeriodProductVersionAsync(statut, productId, versionId, startDate.Value, endDate.Value);
            DisplayTickets(tickets);
            
            Console.WriteLine("\nAppuyez sur une touche pour continuer...");
            Console.ReadKey();
        }

        static async Task ExecuteQuery3(TicketQueryService queryService)
        {
            Console.Clear();
            Console.WriteLine("üîé Requ√™te 3 : Recherche dans un produit et version");
            Console.WriteLine("=".PadRight(60, '='));
            var statut = SelectStatut();

            var productId = await SelectProductAsync(queryService);
            if (productId == -1) return;

            var versionId = await SelectVersionAsync(queryService, productId);
            if (versionId == -1) return;

            var keywords = GetKeywords();
            if (keywords == null || !keywords.Any()) return;

            var tickets = await queryService.GetProblemsByProductVersionKeywordsAsync(statut, productId, versionId, keywords);
            DisplayTickets(tickets);
            
            Console.WriteLine("\nAppuyez sur une touche pour continuer...");
            Console.ReadKey();
        }
        static async Task ExecuteQuery4(TicketQueryService queryService)
        {
            Console.Clear();
            Console.WriteLine("üîéüìÖ Requ√™te 4 : Recherche dans un produit et version");
            Console.WriteLine("=".PadRight(60, '='));
            var statut =  SelectStatut();

            var productId = await SelectProductAsync(queryService);
            if (productId == -1) return;

            var versionId = await SelectVersionAsync(queryService, productId);
            if (versionId == -1) return;

            var (startDate, endDate) = GetDateRange();
            if (startDate == null || endDate == null) return;

            var keywords = GetKeywords();
            if (keywords == null || !keywords.Any()) return;

            var tickets = await queryService.GetProblemsByPeriodProductVersionKeywordsAsync(statut, productId, versionId, startDate.Value, endDate.Value, keywords);
            DisplayTickets(tickets);

            Console.WriteLine("\nAppuyez sur une touche pour continuer...");
            Console.ReadKey();
        }

        #endregion

        #region M√©thodes utilitaires

        static async Task<int?> SelectProductAsync(TicketQueryService queryService)
        {
            Console.WriteLine("\nüè¢ S√©lection du produit :");
            var products = await queryService.GetAllProductsAsync();

            for (int i = 0; i < products.Count; i++)
            {
                Console.WriteLine($"{i + 1}. {products[i].ProductName}");
            }
            Console.WriteLine($"{products.Count+1}. Tous");

            Console.Write("\nChoisissez un produit (num√©ro) : ");
            if (int.TryParse(Console.ReadLine(), out int choice) && choice >= 1 && choice <= products.Count+1)
            {
                if (choice == products.Count + 1)
                {
                    // Si l'utilisateur choisit "Tous", retourner null pour indiquer tous les produits
                    return null;
                }
                
                return products[choice - 1].ProductId;
            }

            Console.WriteLine("‚ùå S√©lection invalide.");
            return -1;
        }

        static async Task<int?> SelectVersionAsync(TicketQueryService queryService, int? productId)
        {
            Console.WriteLine("\nüì± S√©lection de la version :");
            var versions = await queryService.GetVersionsAsync(productId);

            for (int i = 0; i < versions.Count; i++)
            {
                Console.WriteLine($"{i + 1}. {versions[i].VersionName}");
            }
            Console.WriteLine($"{versions.Count + 1}. Tous");
            Console.Write("\nChoisissez une version (num√©ro) : ");
            if (int.TryParse(Console.ReadLine(), out int choice) && choice >= 1 && choice <= versions.Count+1)
            {
                if (choice == versions.Count + 1)
                {
                    // Si l'utilisateur choisit "Tous", retourner null pour indiquer tous les produits
                    return null;
                }
                return versions[choice - 1].VersionId;
            }

            Console.WriteLine("‚ùå S√©lection invalide.");
            return -1;
        }
        static string? SelectStatut()
        {
            Console.WriteLine("\nüì± S√©lection du statut :");
            Console.WriteLine("1: En cours");
            Console.WriteLine("2: R√©solus");
            Console.WriteLine("3: Les deux");
            Console.Write("\nChoisissez un statut : ");
            if (int.TryParse(Console.ReadLine(), out int choice) && choice >= 1 && choice <= 3)
            {
                switch (choice)
                {
                    case 1:
                        return "En cours";
                    case 2:
                        return "R√©solus";
                    case 3:
                        return null;
                    default:
                        return null;
                }
            }

            Console.WriteLine("‚ùå S√©lection invalide.");
            return null;
        }

        static (DateTime?, DateTime?) GetDateRange()
        {
            Console.WriteLine("\nüìÖ Saisie de la p√©riode :");
            
            Console.Write("Date de d√©but (AAAA-MM-JJ) : ");
            if (!DateTime.TryParse(Console.ReadLine(), out DateTime startDate))
            {
                Console.WriteLine("‚ùå Format de date invalide.");
                return (null, null);
            }

            Console.Write("Date de fin (AAAA-MM-JJ) : ");
            if (!DateTime.TryParse(Console.ReadLine(), out DateTime endDate))
            {
                Console.WriteLine("‚ùå Format de date invalide.");
                return (null, null);
            }

            return (startDate, endDate);
        }

        static List<string>? GetKeywords()
        {
            Console.WriteLine("\nüîé Saisie des mots-cl√©s :");
            Console.Write("Entrez les mots-cl√©s s√©par√©s par des virgules : ");
            
            var input = Console.ReadLine();
            if (string.IsNullOrWhiteSpace(input))
            {
                Console.WriteLine("‚ùå Aucun mot-cl√© saisi.");
                return null;
            }

            return input.Split(',', StringSplitOptions.RemoveEmptyEntries)
                       .Select(k => k.Trim())
                       .Where(k => !string.IsNullOrEmpty(k))
                       .ToList();
        }

        static void DisplayTickets(List<TicketModel> tickets)
        {
            if (!tickets.Any())
            {
                Console.WriteLine("\nüì≠ Aucun ticket trouv√©.");
                return;
            }

            Console.WriteLine($"\nüìä {tickets.Count} ticket(s) trouv√©(s) :");
            Console.WriteLine("-".PadRight(120, '-'));

            foreach (var ticket in tickets)
            {
                Console.WriteLine($"üé´ Ticket #{ticket.TicketId} | {ticket.Product?.ProductName} v{ticket.Version?.VersionName} | {ticket.Os?.OsName} | {ticket.Statut?.State}");
                Console.WriteLine($"   üìÖ Cr√©√©: {ticket.DateCreation:dd/MM/yyyy} | R√©solu: {(ticket.DateResolution?.ToString("dd/MM/yyyy") ?? "En cours")}");
                Console.WriteLine($"   üìù {TruncateText(ticket.Description, 100)}");
                Console.WriteLine();
            }
        }

        static string TruncateText(string text, int maxLength)
        {
            if (string.IsNullOrEmpty(text) || text.Length <= maxLength)
                return text;
            
            return text.Substring(0, maxLength) + "...";
        }
        #endregion
    }
}
